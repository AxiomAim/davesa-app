import { Component, Input, ViewChild } from "@angular/core";
import { StringEditorViewModelBase, editableStringRendererName } from "survey-creator-core";
import { CreatorModelComponent } from "./creator-model.component";
import { AngularComponentFactory } from "survey-angular-ui";
import * as i0 from "@angular/core";
import * as i1 from "survey-angular-ui";
import * as i2 from "@angular/common";
export class StringEditorComponent extends CreatorModelComponent {
    constructor(cdr, vcr, ngZone) {
        super(cdr, vcr);
        this.ngZone = ngZone;
        this.justFocused = false;
        this.onChangeHandler = () => {
            this.detectChanges();
        };
    }
    createModel() {
        this.baseModel = new StringEditorViewModelBase(this.locString, this.creator);
        this.baseModel.setLocString(this.locString);
        this.baseModel.blurEditor = () => {
            this.container.nativeElement.blur();
            this.container.nativeElement.spellcheck = false;
        };
        this.baseModel.getEditorElement = () => this.container.nativeElement;
        this.ngZone.runOutsideAngular(() => {
            setTimeout(() => this.baseModel.afterRender());
        });
    }
    get locString() {
        return this.model.locStr;
    }
    get creator() {
        return this.model.creator;
    }
    getModel() {
        return this.baseModel;
    }
    getPropertiesToTrack() {
        return ["creator", "locString"];
    }
    get placeholder() {
        return this.baseModel.placeholder;
    }
    get contentEditable() {
        return this.baseModel.contentEditable;
    }
    get characterCounter() {
        return this.baseModel.characterCounter;
    }
    get showCharacterCounter() {
        return this.baseModel.showCharacterCounter;
    }
    get getCharacterCounterClass() {
        return this.baseModel.getCharacterCounterClass;
    }
    get className() {
        return this.baseModel.className(this.locString.renderedHtml);
    }
    get errorText() {
        return this.baseModel.errorText;
    }
    onBlur(event) {
        this.container.nativeElement.spellcheck = false;
        this.locString.__isEditing = false;
        this.justFocused = false;
        this.baseModel.onBlur(event);
        return this.baseModel.errorText;
    }
    onFocus(event) {
        this.baseModel.onFocus(event);
        this.justFocused = true;
    }
    onPaste(event) {
        this.baseModel.onPaste(event);
    }
    done(event) {
        this.baseModel.done(event);
        this.locString.__isEditing = false;
    }
    edit(event) {
        this.container.nativeElement.focus();
        this.locString.__isEditing = true;
        this.baseModel.onClick(event);
    }
    ngOnInit() {
        var _a;
        super.ngOnInit();
        (_a = this.locString) === null || _a === void 0 ? void 0 : _a.onStringChanged.add(this.onChangeHandler);
    }
    ngAfterViewInit() {
        if (this.locString.__isEditing) {
            this.container.nativeElement.focus();
        }
    }
    ngOnDestroy() {
        var _a;
        this.baseModel.blurEditor = undefined;
        this.baseModel.getEditorElement = undefined;
        this.baseModel.dispose();
        (_a = this.locString) === null || _a === void 0 ? void 0 : _a.onStringChanged.remove(this.onChangeHandler);
        super.ngOnDestroy();
    }
}
StringEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: StringEditorComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ViewContainerRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
StringEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: StringEditorComponent, selector: "svc-string-edtior", inputs: { model: "model" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #template>\n  <span [class]=\"className\">\n    <span class=\"svc-string-editor__content\">\n      <div class=\"svc-string-editor__border svc-string-editor__border--hover\"></div>\n        <div class=\"svc-string-editor__border svc-string-editor__border--focus\"></div>\n        <span class=\"svc-string-editor__input\">\n          <span role=\"textbox\" *ngIf=\"!locString.hasHtml\" class=\"sv-string-editor\" spellcheck=\"false\"\n              (focus)=\"onFocus($event)\" (paste)=\"onPaste($event)\" (blur)=\"onBlur($event)\"  (input)=\"baseModel.onInput($event)\" (keydown)=\"baseModel.onKeyDown($event)\" (keyup)=\"baseModel.onKeyUp($event)\" (compositionstart)=\"baseModel.onCompositionStart($event)\" (compositionend)=\"baseModel.onCompositionEnd($event)\" (mouseup)=\"baseModel.onMouseUp($event)\" (click)=\"edit($event)\" [textContent]=\"locString.renderedHtml\" [attr.aria-placeholder]=\"placeholder\" [attr.contenteditable]=\"contentEditable\" #container></span>\n          <span role=\"textbox\" *ngIf=\"locString.hasHtml\" class=\"sv-string-editor sv-string-editor--html\" spellcheck=\"false\"\n          (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" (keydown)=\"baseModel.onKeyDown($event)\" (keyup)=\"baseModel.onKeyUp($event)\" (compositionstart)=\"baseModel.onCompositionStart($event)\" (compositionend)=\"baseModel.onCompositionEnd($event)\" (mouseup)=\"baseModel.onMouseUp($event)\"\n          (click)=\"edit($event)\" [attr.aria-placeholder]=\"placeholder\" [attr.contenteditable]=\"contentEditable\" [innerHtml]=\"locString.renderedHtml | safeHtml\" #container></span>\n          <sv-ng-character-counter *ngIf=\"showCharacterCounter\" [counter]=\"characterCounter\" [remainingCharacterCounter]=\"getCharacterCounterClass\"></sv-ng-character-counter>\n        </span>\n    </span>\n    <span *ngIf=\"errorText\" class=\"svc-string-editor__error\">{{errorText}}</span>\n  </span>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1.CharacterCounterComponent, selector: "sv-ng-character-counter", inputs: ["counter", "remainingCharacterCounter"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "safeHtml": i1.SafeHtmlPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: StringEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "svc-string-edtior",
                    templateUrl: "./string-editor.component.html",
                    styles: [":host { display: none; }"]
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ViewContainerRef }, { type: i0.NgZone }]; }, propDecorators: { model: [{
                type: Input
            }], container: [{
                type: ViewChild,
                args: ["container"]
            }] } });
AngularComponentFactory.Instance.registerComponent(editableStringRendererName, StringEditorComponent);
//# sourceMappingURL=data:application/json;base64,