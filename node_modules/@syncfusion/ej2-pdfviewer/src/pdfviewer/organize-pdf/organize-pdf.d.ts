import { PdfViewer, PdfViewerBase, ISize } from '../index';
/**
 * The `PageOrganizer` module is used to handle page organize operations of PDF viewer.
 */
export declare class PageOrganizer {
    private pdfViewer;
    private pdfViewerBase;
    private rotateRightButton;
    private rotateLeftButton;
    private insertRightButton;
    private insertLeftButton;
    private deleteButton;
    private toolbar;
    /**
     * @private
     */
    dataDetails: any[];
    private thumbnail;
    private imageContainer;
    private organizeDialog;
    private tileAreaDiv;
    private thumbnailImage;
    private pageLink;
    private previewRequestHandler;
    private contextMenuObj;
    private mobileContextMenu;
    /**
     * @private
     */
    organizePagesCollection: OrganizeDetails[];
    private tempOrganizePagesCollection;
    private isSkipRevert;
    private isAllImagesReceived;
    private selectAllCheckBox;
    private totalCheckedCount;
    /**
     * @param pdfViewer
     * @param pdfViewerBase
     * @param pdfViewer
     * @param pdfViewerBase
     * @private
     */
    constructor(pdfViewer: PdfViewer, pdfViewerBase: PdfViewerBase);
    /**
     * @private
     */
    createOrganizeWindow(isReConstruct?: boolean): void;
    /**
     * @private
     */
    createOrganizeWindowForMobile(): void;
    private updateOrganizeDialogSize;
    private createContentArea;
    private createMobileContextMenu;
    private contextMenuBeforeOpen;
    private contextMenuItemSelect;
    /**
     * @private
     */
    createRequestForPreview(): Promise<any>;
    private requestPreviewCreation;
    /**
   * @param jsonData
   * @private
   */
    updatePreviewCollection(data: any): void;
    /**
     * @private
     */
    previewOnMessage(event: any): void;
    /**
     * @private
     */
    getData(data: any, isClientRender: boolean): void;
    private renderThumbnailImage;
    /**
     * @private
     */
    tileImageRender(pageIndex: number, subIndex?: number, pageOrder?: number, targetElement?: HTMLElement, isNewPage?: boolean, isBefore?: boolean, isEmptyPage?: boolean): void;
    /**
     * @param event
     * @private
     */
    thumbnailMouseOver: (event: MouseEvent) => void;
    /**
     * @param event
     * @private
     */
    thumbnailMouseLeave: (event: MouseEvent) => void;
    private onSelectAllClick;
    private enableDisableToolbarItems;
    private disableTileDeleteButton;
    private onSelectClick;
    private updateSelectAllCheckbox;
    private setSelectionRingStyle;
    private onTooltipBeforeOpen;
    private rotateButtonClick;
    private openContextMenu;
    private rotateLeftButtonClick;
    private onToolbarRightButtonClick;
    private onToolbarLeftButtonClick;
    private onToolbarDeleteButtonClick;
    private updateTempRotationDetail;
    private getRotatedAngle;
    private getRotation;
    private updateRotationDetailCollection;
    private updatePageSize;
    private onSaveClicked;
    private blobToBase64;
    private updateOrganizePageDetailsInViewer;
    private getNextSubIndex;
    private insertRightButtonClick;
    private insertLeftButtonClick;
    private deleteButtonClick;
    private deletePageElement;
    private deleteTempPage;
    private updateTotalPageCount;
    private updatePageNumber;
    private insertTempPage;
    private updateOrganizePageCollection;
    /**
     *
     * @param pageCanvas
     * @param pageNumber
     * @private
     */
    applyElementStyles(pageCanvas: any, pageNumber: number): void;
    private onSaveasClicked;
    /**
     *
     * Rotates all pages in the PDF Viewer by the specified angle.
     * @param pageRotateAngle - The angle by which to rotate the pages (PdfPageRotateAngle).
     *                          The rotation can be 0, 90, 180, or 270 degrees.
     * @returns void
     * @private
     */
    rotateAllPages(pageRotateAngle: PdfPageRotateAngle): void;
    /**
     * Rotates the specified pages in the PDF Viewer by the specified angle.
     * @param pageIndexes - The array of page indexes to rotate.
     * @param pageRotateAngle - The angle by which to rotate the pages (PdfPageRotateAngle).
     *                          The rotation can be 0, 90, 180, or 270 degrees.
     * @returns void
     * @private
     */
    rotatePages(pageIndexes: number[], pageRotateAngle: PdfPageRotateAngle): void;
    /**
     * @private
     */
    rotatePages(pageStartIndex: number, pageEndIndex: number, pageRotateAngle: PdfPageRotateAngle): void;
    /**
     * @private
     */
    rotatePages(pageRotations: PageRotation[]): void;
    private processRotation;
    private generateRange;
    private pdfRotateAngle;
    private createTooltip;
    /**
     * Rotates the specified pages clockwise by 90 degrees.
     * @param pageNumbers - Array of page numbers to rotate.
     * @private
     */
    rotateClockwise(pageNumbers: number[]): void;
    /**
     * Rotates the specified pages counterclockwise by 90 degrees.
     * @param pageNumbers - Array of page numbers to rotate.
     * @private
     */
    rotateCounterclockwise(pageNumbers: number[]): void;
    /**
     * Opens the page organizer dialog within the Pdf Viewer, allowing for management of PDF pages.
     *
     * ```html
     * <div id="pdfViewer" style="height: 100%;width: 100%;"></div>
     * ```
     * ```ts
     * let viewer: PdfViewer = new PdfViewer();
     * viewer.appendTo("#pdfViewer");
     * viewer.documentLoad = () => {
     *      viewer.pageOrganizer.openPageOrganizer();
     * }
     * ```
     *
     * @returns void
     */
    openPageOrganizer(): void;
    /**
     * Closes the currently open page organizer dialog within the PDF Viewer, if present.
     *
     * ```html
     * <div id="pdfViewer" style="height: 100%;width: 100%;"></div>
     * ```
     * ```ts
     * let viewer: PdfViewer = new PdfViewer();
     * viewer.appendTo("#pdfViewer");
     * viewer.documentLoad = () => {
     *      viewer.pageOrganizer.closePageOrganizer();
     * }
     * ```
     *
     * @returns void
     */
    closePageOrganizer(): void;
    /**
     * @private
     */
    switchPageOrganizer(): void;
    /**
     * @private
     */
    getModuleName(): string;
    private destroyDialogWindow;
    /**
     * @private
     */
    clear(): void;
    /**
     * @private
     */
    destroy(): boolean;
}
/**
* Enum for PdfPageRotateAngle
*/
export declare enum PdfPageRotateAngle {
    RotateAngle0 = 1,
    RotateAngle90 = 2,
    RotateAngle180 = 3,
    RotateAngle270 = 4,
    RotateAngle360 = 1
}
export declare class PageRotation {
    pageIndex: number;
    rotationAngle: PdfPageRotateAngle;
    constructor(pageIndex: number, rotationAngle: PdfPageRotateAngle);
}
/**
 * Interface representing details about a page, including rotation angle and page index.
 *
 * @hidden
 */
export interface PageDetails {
    rotateAngle: number;
    pageIndex: number;
}
/**
 * Interface representing details about organizing pages, including page ID, current page index, rotate angle, and status of insertion and deletion.
 */
export declare class OrganizeDetails {
    currentPageIndex: number;
    pageIndex: number;
    copiedPageIndex: number;
    isInserted: boolean;
    isDeleted: boolean;
    isCopied: boolean;
    hasEmptyPageAfter: boolean;
    hasEmptyPageBefore: boolean;
    rotateAngle: number;
    pageSize: ISize;
    constructor(currentPageIndex: number, pageIndex: number, copiedPageIndex: number, isInserted: boolean, isDeleted: boolean, isCopied: boolean, hasEmptyPageAfter: boolean, hasEmptyPageBefore: boolean, rotateAngle: number, pageSize: ISize);
}
